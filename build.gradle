plugins {
//    id 'org.springframework.boot' version '2.6.7'
//    id 'io.spring.dependency-management' version '1.1.5'
//    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//    id 'groovy'

    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

//java {
//    sourceCompatibility = '11'
//}




configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}



repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok:1.18.30' // 여기에 버전이 명시됩니다.
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

//    compileOnly 'org.projectlombok:lombok'
//    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // handlebars
    implementation 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.4'

    // https://github.com/seruco/base62
    implementation 'io.seruco.encoding:base62:0.1.3'

    // spring retry
    implementation 'org.springframework.retry:spring-retry'

    // Mock Web Server
    testImplementation('com.squareup.okhttp3:okhttp:4.10.0')
    testImplementation("com.squareup.okhttp3:mockwebserver:4.12.0")

    // testcontainers
    testImplementation 'org.testcontainers:spock:1.17.1'
    testImplementation 'org.testcontainers:mariadb:1.17.1'

    // spock
    testImplementation('org.spockframework:spock-core:2.1-groovy-3.0')
    testImplementation('org.spockframework:spock-spring:2.1-groovy-3.0')

    // 런타임에 클래스 기반 spock mock을 만들기 위해서 필요
    testImplementation('net.bytebuddy:byte-buddy:1.12.10')

}

//tasks.named('test') {
test {
    useJUnitPlatform()
}

// $ ./gradlew clean build -PKAKAO_REST_API_KEY={api key 값} 명령어로 전체 테스트 및 빌드하여 jar 파일 생성
processTestResources {
    boolean hasProperty = project.hasProperty("KAKAO_REST_API_KEY")
    System.out.println("Set kakao rest api key: $hasProperty")
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}

bootJar {
    archiveFileName = 'app.jar'
}
